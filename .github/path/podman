#! /usr/bin/env python3.11

"""
Podman wrapper that turns on caching forcefully. This is to be used for builds in GitHub Actions.
"""
import os
import shlex
import subprocess
import sys


def main():
    cache_repo = os.environ['CACHE_IMAGE'] if "CACHE_IMAGE" in os.environ else ""
    # docker will cache to :latest, not to content-hashed :sha256 tag
    # and mode=max does not change that
    for arg in sys.argv[1:]:
        # -t image name
        if arg.startswith("workbench-images:"):
            cache_repo += f"/{arg}"

    # podman run/build ...
    first, second, *rest = sys.argv
    # args = ["/home/linuxbrew/.linuxbrew/bin/podman", second]
    args = ["docker"]
    if second == "build":
        args.append("buildx")
        args.append("build")
    else:
        args.append(second)

    for arg in rest:
        if arg == '--no-cache':
            continue
        if arg.startswith("localhost/"):
            args.append(arg[len("localhost/"):])
            continue
        args.append(arg)
    # # https://github.com/containers/podman/issues/22044
    # if second in ("build", "run"):
    #     args.insert(2, "--network=slirp4netns")
    if second == "build":
        # https://github.com/moby/buildkit#registry-push-image-and-cache-separately
        # args.append("--export-cache=mode=max")
        # WARNING: No output specified with docker-container driver. Build result will only remain in the build cache. To push result image into registry use --push or to load image into docker use --load
        # args.append("--load")
        # ERROR: failed to solve: failed to read dockerfile: open Dockerfile: no such file or directory
        args.append("-fContainerfile")
    if second == "build" and "CACHE_IMAGE" in os.environ:
        # args.append("--layers")
        # args.append("--retry=10")
        args.append(f"--cache-from={cache_repo}")
        # todo: conditionally, don't do this for PRs?
        # args.append(f"--cache-to={os.environ['CACHE_IMAGE']}")
        args.append(f"--cache-to=type=registry,mode=max,ref={cache_repo}")

    print("+", shlex.join(args), file=sys.stderr)
    ret = subprocess.call(args=args)

    exit(ret)


if __name__ == '__main__':
    main()
